import argparse
from pathlib import Path

import numpy as np

from pl_modules.model import PixelCNN
from common.smart_montecarlo import mcmc

# Parser
parser = argparse.ArgumentParser()
parser.add_argument("--ckpt_path", type=Path, help="Path to the checkpoint")
parser.add_argument("--num_sample", type=int, help="Number of sample to generate")
parser.add_argument("--beta", type=float, help="Inverse temperature")
parser.add_argument(
    "--save_mcmc",
    dest="save",
    action="store_true",
    help="Flag if you want to save samples after MCMC",
)
parser.add_argument(
    "--verbose",
    dest="verbose",
    action="store_true",
    help="Flag if you want to see prints in MCMC",
)


def generate(args: argparse.ArgumentParser):
    # load the lighninig model
    model = PixelCNN.load_from_checkpoint(args.ckpt_path)

    model.eval()
    out = model(args.num_sample)

    save_path = "results/"
    size = out["sample"].shape[-1] ** 2
    save_name = (
        "size-"
        + str(size)
        + "_sample-"
        + str(args.num_sample)
        + "_"
        + args.ckpt_path.parts[-3]
    )

    print("Saving sample generated by PixelCNN...", save_name)
    np.savez(save_path + save_name, **out)

    num_sample = out["sample"].shape[0]
    mcmc(args.beta, num_sample - 1, out, verbose=args.verbose, save=args.save)


if __name__ == "__main__":
    args = parser.parse_args()
    generate(args)
